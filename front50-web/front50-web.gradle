/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
  repackage = System.getProperty('springBoot.repackage', "false")
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
  systemProperty('spring.config.location', project.springConfigLocation)
}

apply plugin: 'spring-boot'
apply plugin: 'spinnaker.package'

configurations.all {
  exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
  compile project(":front50-core")
  compile project(":front50-cassandra")
  compile project(":front50-gcs")
  compile project(":front50-redis")
  compile project(":front50-s3")
  compile project(":front50-swift")
  compile project(":front50-pipelines")
  compile project(":front50-migrations")
  compile project(":front50-azure")

  spinnaker.group "bootWeb"

// Replace below with this line when fiat becomes stable.
//  spinnaker.group "fiat"
  compile "com.netflix.spinnaker.fiat:fiat-api:0.24.0"
  spinnaker.dependency("bootActuator")
  spinnaker.dependency("bootWeb")
  spinnaker.dependency("bootDataRest")
  spinnaker.dependency("springSecurityConfig")
  spinnaker.dependency("springSecurityCore")
  spinnaker.dependency("springSecurityWeb")

  compile spinnaker.dependency("korkWeb")
  compile spinnaker.dependency("korkStackdriver")
  compile spinnaker.dependency("korkSwagger")
  compile spinnaker.dependency("kork")

  testCompile project(":front50-test")
}

bootRun {
  // jamm is required when using prepared statements with in-memory C*
  def jamm = project.configurations.compile.find { it.name.startsWith('jamm') }
  jvmArgs applicationDefaultJvmArgs + "-javaagent:${jamm}"
}

tasks.bootRepackage.enabled = Boolean.valueOf(project.repackage)
